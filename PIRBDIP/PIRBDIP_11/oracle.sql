-- Таблица клиентов
DROP TABLE customer CASCADE CONSTRAINTS;
DROP TABLE product CASCADE CONSTRAINTS;
DROP TABLE orders CASCADE CONSTRAINTS;
DROP TABLE administrator CASCADE CONSTRAINTS;

CREATE TABLE customer (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name NVARCHAR2(100) NOT NULL,
    email NVARCHAR2(100) NOT NULL,
    password NVARCHAR2(100) NOT NULL,
    CONSTRAINT customer_email_unique UNIQUE (email)
);

-- Таблица администраторов
CREATE TABLE administrator (
    id NUMBER PRIMARY KEY,
    name NVARCHAR2(100) NOT NULL,
    email NVARCHAR2(100) NOT NULL,
    password NVARCHAR2(100) NOT NULL,
    CONSTRAINT admin_email_unique UNIQUE (email)
);

-- Таблица продавцов
CREATE TABLE seller (
    id NUMBER PRIMARY KEY,
    name NVARCHAR2(100) NOT NULL,
    email NVARCHAR2(100) NOT NULL,
    password NVARCHAR2(100) NOT NULL,
    CONSTRAINT seller_email_unique UNIQUE (email)
);

-- Таблица товаров
CREATE TABLE product (
    id NUMBER PRIMARY KEY,
    name NVARCHAR2(100) NOT NULL,
    description CLOB,
    price NUMBER(10,2) NOT NULL,
    seller_id NUMBER NOT NULL,
    CONSTRAINT fk_product_seller FOREIGN KEY (seller_id) REFERENCES seller(id)
);

-- Таблица заказов
CREATE TABLE orders (
    id NUMBER PRIMARY KEY,
    customer_id NUMBER NOT NULL,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status NVARCHAR2(50) NOT NULL,
    CONSTRAINT fk_order_customer FOREIGN KEY (customer_id) REFERENCES customer(id)
);

-- Таблица товаров в заказах
CREATE TABLE order_product (
    order_id NUMBER NOT NULL,
    product_id NUMBER NOT NULL,
    product_name NVARCHAR2(100) NOT NULL,
    quantity NUMBER DEFAULT 1,
    CONSTRAINT pk_order_product PRIMARY KEY (order_id, product_id),
    CONSTRAINT fk_order_product_order FOREIGN KEY (order_id) REFERENCES orders(id),
    CONSTRAINT fk_order_product_product FOREIGN KEY (product_id) REFERENCES product(id),
    CONSTRAINT chk_quantity_positive CHECK (quantity > 0)
);





-- Заполнение таблицы customer (клиенты)
INSERT INTO customer (name, email, password) VALUES 
('Иванов Алексей', 'ivanov@example.com', 'pass123')
INSERT INTO customer (name, email, password) VALUES 
('Петрова Мария', 'petrova@example.com', 'qwerty456')
INSERT INTO customer (name, email, password) VALUES 
('Сидоров Дмитрий', 'sidorov@example.com', 'secure789')
INSERT INTO customer (name, email, password) VALUES 
('Кузнецова Анна', 'kuznetsova@example.com', 'anna2023')
INSERT INTO customer (name, email, password) VALUES 
('Смирнов Павел', 'smirnov@example.com', 'pavelpass');

-- Заполнение таблицы administrator (администраторы)
INSERT INTO administrator VALUES 
(1, 'Админ Главный', 'admin@store.com', 'admin123'),
INSERT INTO administrator VALUES 
(2, 'Модератор Системы', 'moderator@store.com', 'mod456');

-- Заполнение таблицы seller (продавцы)
INSERT INTO seller VALUES 
(1, 'ООО ТехноМир', 'tech@example.com', 'techpass1'),
INSERT INTO seller VALUES 
(2, 'ИП КнижныйРай', 'books@example.com', 'bookpass2'),
INSERT INTO seller VALUES 
(3, 'ДомМода', 'fashion@example.com', 'fashpass3'),
INSERT INTO seller VALUES 
(4, 'ГаджетЛенд', 'gadgets@example.com', 'gadgetpass');

-- Заполнение таблицы product (товары)
INSERT INTO product VALUES (101, 'Смартфон X10', 'Мощный смартфон с камерой 48 МП', 29999.99, 1);
INSERT INTO product VALUES (102, 'Ноутбук UltraBook', 'Легкий и производительный ноутбук', 64999.00, 1);
INSERT INTO product VALUES (201, 'Война и мир', 'Роман Л.Н. Толстого в твердом переплете', 1200.50, 2);
INSERT INTO product VALUES (202, 'SQL для начинающих', 'Учебник по базам данных', 2500.00, 2);
INSERT INTO product VALUES (301, 'Джинсы классические', 'Синие джинсы прямого кроя', 4999.99, 3);
INSERT INTO product VALUES (302, 'Футболка хлопковая', 'Белая футболка из 100% хлопка', 1999.00, 3);
INSERT INTO product VALUES (401, 'Умные часы Pro', 'Фитнес-трекер с пульсометром', 8999.00, 4);
INSERT INTO product VALUES (402, 'Беспроводные наушники', 'Наушники с шумоподавлением', 5999.50, 4);


-- Заполнение таблицы orders (заказы)
INSERT ALL
    INTO orders (id, customer_id, order_date, status) 
        VALUES (1001, 1, TO_TIMESTAMP('2023-05-10 10:30:00', 'YYYY-MM-DD HH24:MI:SS'), 'Завершен')
    INTO orders (id, customer_id, order_date, status) 
        VALUES (1002, 2, TO_TIMESTAMP('2023-05-15 14:45:00', 'YYYY-MM-DD HH24:MI:SS'), 'В обработке')
    INTO orders (id, customer_id, order_date, status) 
        VALUES (1003, 3, TO_TIMESTAMP('2023-05-20 09:15:00', 'YYYY-MM-DD HH24:MI:SS'), 'Отправлен')
    INTO orders (id, customer_id, order_date, status) 
        VALUES (1004, 1, TO_TIMESTAMP('2023-06-01 16:20:00', 'YYYY-MM-DD HH24:MI:SS'), 'Новый')
    INTO orders (id, customer_id, order_date, status) 
        VALUES (1005, 4, TO_TIMESTAMP('2023-06-05 11:10:00', 'YYYY-MM-DD HH24:MI:SS'), 'В обработке')
    INTO orders (id, customer_id, order_date, status) 
        VALUES (1006, 5, SYSTIMESTAMP, 'Новый')
SELECT * FROM dual;

INSERT ALL
    INTO order_product (order_id, product_id, product_name, quantity) 
        VALUES (1001, 101, 'Смартфон X10', 1)
    INTO order_product (order_id, product_id, product_name, quantity) 
        VALUES (1001, 401, 'Умные часы Pro', 1)
    INTO order_product (order_id, product_id, product_name, quantity) 
        VALUES (1002, 201, 'Война и мир', 2)
    INTO order_product (order_id, product_id, product_name, quantity) 
        VALUES (1002, 202, 'SQL для начинающих', 1)
    INTO order_product (order_id, product_id, product_name, quantity) 
        VALUES (1003, 301, 'Джинсы классические', 1)
    INTO order_product (order_id, product_id, product_name, quantity) 
        VALUES (1003, 302, 'Футболка хлопковая', 3)
    INTO order_product (order_id, product_id, product_name, quantity) 
        VALUES (1004, 102, 'Ноутбук UltraBook', 1)
    INTO order_product (order_id, product_id, product_name, quantity) 
        VALUES (1005, 402, 'Беспроводные наушники', 2)
    INTO order_product (order_id, product_id, product_name, quantity) 
        VALUES (1006, 101, 'Смартфон X10', 1)
    INTO order_product (order_id, product_id, product_name, quantity) 
        VALUES (1006, 402, 'Беспроводные наушники', 1)
SELECT * FROM dual;

CREATE OR REPLACE TYPE t_orders_record AS OBJECT (
    order_id NUMBER,
    customer_name NVARCHAR2(100),
    product_name NVARCHAR2(100),
    order_date DATE,
    quantity NUMBER
);
/

CREATE OR REPLACE TYPE t_orders_table AS TABLE OF t_orders_record;
/

CREATE OR REPLACE FUNCTION get_orders_in_period(
    start_date IN DATE,
    end_date IN DATE
) RETURN t_orders_table PIPELINED IS
BEGIN
    FOR rec IN (
        SELECT 
            o.id AS order_id,
            c.name AS customer_name,
            op.product_name,
            o.order_date,
            op.quantity
        FROM orders o
        JOIN customer c ON o.customer_id = c.id
        JOIN order_product op ON o.id = op.order_id
        WHERE o.order_date BETWEEN start_date AND end_date
    ) LOOP
        PIPE ROW(t_orders_record(rec.order_id, rec.customer_name, rec.product_name, rec.order_date, rec.quantity));
    END LOOP;
    RETURN;
END get_orders_in_period;
/
SELECT * 
FROM TABLE(get_orders_in_period(
    TO_DATE('2023-05-01', 'YYYY-MM-DD'),
    TO_DATE('2023-06-30', 'YYYY-MM-DD')
));

sqlplus sys/password as sysdba

SET PAGESIZE 50000
SET LINESIZE 200
SET FEEDBACK OFF
SET ECHO OFF
SPOOL D:\masha\university\6_sem\PIRBDIP\PIRBDIP_11\orders_output.txt
SELECT * FROM orders;
SPOOL OFF;

SELECT * FROM TABLE(get_orders_in_period(
    TO_DATE('2023-05-01', 'YYYY-MM-DD'),
    TO_DATE('2023-06-30', 'YYYY-MM-DD')
));


CREATE USER C##load IDENTIFIED BY 1;
GRANT CONNECT, RESOURCE TO C##load;
GRANT INSERT, UPDATE ON orders TO C##load;
sqlplus c##load/1@orcl
CREATE TABLE orders (
    id NUMBER PRIMARY KEY,
    customer_id NUMBER NOT NULL,
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    status NVARCHAR2(50) NOT NULL
);
sqlldr c##load/1@orcl control=orders_loader.ctl log=orders_loader.log
SELECT id, customer_id, 
TO_CHAR(order_date, 'DD.MM.YYYY HH24:MI:SS') as order_date,
status 
FROM orders;



